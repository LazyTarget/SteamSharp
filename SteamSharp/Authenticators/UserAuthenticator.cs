
using Newtonsoft.Json;
using System;
namespace SteamSharp.Authenticators {

	/// <summary>
	/// Authenticatior allowing access to Steam resources protected by user credentials (username, password)
	/// </summary>
	public class UserAuthenticator : ISteamAuthenticator {

		internal string AccessToken { get; set; }

		/// <summary>
		/// Invoke method to initialize the authenticator (which should then be added to the Authenticator property of a <see cref="SteamClient"/> instance).
		/// </summary>
		/// <param name="accessToken">Access Token generated by the <see cref="UserAuthenticator.GetAccessTokenForUserAsync"/> method.</param>
		/// <returns><see cref="UserAuthenticator"/> object for authentication of a <see cref="SteamClient"/> instance.</returns>
		public static UserAuthenticator ForProtectedResource( string accessToken ) {

			return new UserAuthenticator {
				AccessToken = accessToken
			};

		}

		/// <summary>
		/// Queries Steam API with user credentials and returns a valid access token for use in API calls.
		/// </summary>
		/// <param name="username">Username of the user requesting authentication.</param>
		/// <param name="password">Password for the user requesting authentication.</param>
		/// <returns>Access token which can then be used with the <see cref="UserAuthenticator.ForProtectedResource"/> method.</returns>
		public static string GetAccessTokenForUserAsync( string username, string password ) {

			RSAValues publicKey = GetRSAKeyValues( username );

			// RSA Encryption
			
			

			return null;

		}

		private static RSAValues GetRSAKeyValues( string username ) {

			SteamClient client = new SteamClient( "https://steamcommunity.com/" );
			SteamRequest request = new SteamRequest( "login/getrsakey" );
			request.AddParameter( "username", username, ParameterType.QueryString );

			ISteamResponse response = client.Execute( request );

			if( !response.IsSuccessful )
				throw new SteamRequestException( "User authentication failed. Request to procure Steam RSA Key failed (HTTP request not successful).", response );

			RSAValues result = JsonConvert.DeserializeObject<RSAValues>( response.Content );

			if( !result.Success || String.IsNullOrEmpty( result.PublicKeyModulus ) || String.IsNullOrEmpty( result.PublicKeyExponent ) )
				throw new SteamAuthenticationException( "Unable to authenticate user. Likely the username supplied is invalid." );

			return result;

		}

		/// <summary>
		/// Method invoked by the library in order to authenticate for a resource.
		/// Should not be called directly by consumer code.
		/// </summary>
		/// <param name="client">SteamClient instance to authenticate.</param>
		/// <param name="request">Request requiring authentication.</param>
		public void Authenticate( SteamClient client, ISteamRequest request ) {
			request.AddParameter( "access_token", AccessToken, ParameterType.QueryString );
		}

		private class RSAValues {

			/// <summary>
			/// Boolean value indicating whether or not the key generation was successful.
			/// </summary>
			public bool Success { get; set; }

			/// <summary>
			/// Modulus value to be used for RSA encryption.
			/// </summary>
			[JsonProperty( "publickey_mod" )]
			public string PublicKeyModulus { get; set; }

			/// <summary>
			/// Exponent value to be used for RSA encryption.
			/// </summary>
			[JsonProperty( "publickey_exp" )]
			public string PublicKeyExponent { get; set; }

		}

	}

}